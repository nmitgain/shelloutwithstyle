---
- name: Some examples for long running tasks and backgrounding
  block:
  - name: Do nothing for 15 seconds. Check every 2 seconds for completion
    shell: echo "This is the Long-Runner with polling" && date && sleep 15 && date
    async: 20 # maximum time in seconds this task is allowed to run. Task fails if not finished in time
    poll: 2
    register: async_task

  - name: Continue doing something when long running task is finished
    debug:
      msg: "Async task has finished. Output: {{ async_task.stdout_lines }}"


  - name: Do something again for 15 seconds, but in background
    shell: echo "Background task without polling" && date && sleep 15 && date
    async: 20
    poll: 0
    register: background_task

  - name: Do something while Background task is still running
    shell: echo "Foreground Task 1 at $(date)"
    register: task1

  - name: Result task1
    debug:
      var: task1.stdout_lines

  - name: Do something else while the Background task is still running
    shell: echo "Foreground Task 2 at $(date)"
    register: task2

  - name: Result task2
    debug:
      var: task2.stdout_lines

  - name: Wait for Background task to finish
    async_status:
      jid: "{{ background_task.ansible_job_id }}"
    register: job_result
    until: job_result.finished
    retries: 10
    poll: 2

  # - name: fail
  #   fail:

  always: 
    - name: Cleanup Cache from async runs
      tags: cleanup
      async_status:
        jid: "{{ item.ansible_job_id }}"
        mode: cleanup
      with_items:
        - "{{ background_task }}"
        - "{{ async_task }}"
      loop_control:
        label: "Cleaning cache for job {{ item.ansible_job_id }} on {{ ansible_host }}"
      

- name: Do something else
  debug:
    msg: "The End"
...

